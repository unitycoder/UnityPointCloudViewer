*** PointCloud Viewer & Tools for Unity ***

v2.80

- Note: Upgraded to Unity 2019.4

- Added: V3 viewer, Loader thread count setting (2-16) can help loading small tiled clouds faster https://github.com/unitycoder/UnityPointCloudViewer/issues/109#issuecomment-1752012364
- Added: V3 viewer, Clamp max tile point count for all tiles or nearby vs further away (helps if you data has few dense spots and you dont want to filter whole cloud with external tools) https://github.com/unitycoder/UnityPointCloudViewer/issues/107
- Added: DrawWireSphere helper method into PointCloudTools.cs
- Added: Viewerstats script. Displays visible tile & point count and total point count (attach script to gameobject, assign references to viewer and UI text)
- Added: Visualize culling spheres to ViewerStats (press "N") *Requires Gizmos enabled in gameview **Works only in editor, for debugging
- Added: Visualize tile bounds to ViewerStats (press "B") *Requires Gizmos enabled in gameview **Works only in editor, for debugging
- Added: Public GetVisibleTileCount, GetCullingSpheres, GetVisiblePointCount, GetAllTileBounds, InitIsReady, GetLoadQueueCount, RunGetPointsInsideBoxThread, GetPointsInsideBox methods into v3 viewer
- Added: External licenses info https://github.com/unitycoder/UnityPointCloudViewer/wiki/Licenses
- Added: Brekel new public methods & info https://github.com/unitycoder/UnityPointCloudViewer/wiki/View-Brekel-Point-Cloud-Pro-.bin-files#api-public-methods
- Added: Initial format comparison table https://github.com/unitycoder/UnityPointCloudViewer/wiki/Compare-Formats *still work in progress

- Fixed: RandomCloudGenerator can now generate different combinations of clouds at the same time (previously couldnt create v2 and pts etc.)
- Fixed: Added missing namespaces to some scripts

- Changed: Update public methods info: https://github.com/unitycoder/UnityPointCloudViewer/wiki/V3-Tiles-Format#api-public-methods

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

*** PointCloud Viewer & Tools for Unity ***

v2.70

- Feature: Binary converter, allow external file selection (so that you dont need to copy point cloud files inside Assets/ folder)
- Feature: MeshConverter, Keep every Nth point. Can use this to further reduce point count on import.

- Improved: V3 viewer, if you accidentally enter filename with empty spaces at the end, error message for invalid file is now printed with quotes, so can notice it easier "asdf.pcroot" > "asdf.pcroot "
- CallReadPointCloudThreaded() can be now called from another thread or event (removed transform and gameobject references)

- Added: PointCloudViewerDX11, added toggle: [x] Apply Translation Matrix, then point cloud follows Transform: pos, rot, scale (V1/V2 only)
- Added: BrekelPlayer, added toggle: [x] Apply Translation Matrix, then point cloud follows Transform: pos, rot, scale *Note requires using "PointCloud_DX11_ColorSizeV2-TranslationMatrix.mat" material
- Added: New material and shader "PointCloud_DX11_ColorSizeV2-TranslationMatrix" (required if use [x] Apply Translation Matrix feature)
- Added: Example scene and script for Runtime LAS/LAZ conversion "PointCloud-runtime-laz-commandline-workaround.unity" (windows only)

- Fixed: V3 viewer Duplicate "#MainThreadHelper" gameobject added into scene
- Fixed: Comma vs Dot issue in V3 format (binary converter) https://github.com/unitycoder/UnityPointCloudViewer/issues/69
- Fixed: Parsing PTS file with Normals at the end (XYZRGBNxNyNz)
- Fixed: Parsing PTS file with Intensity and Normals (XYZIRGBNxNyNz)
- Fixed: V2 viewer: Now doesnt lock file for reading (if other reader needs to read same binary file)

- Changed: Add namespace to GLDebug

- Note: HDRP support requires small modifications: https://github.com/unitycoder/UnityPointCloudViewer/issues/105
- Note: URP support requires small modifications ** ONLY if you have issues with points getting "stuck" at UI position **: https://github.com/unitycoder/UnityPointCloudViewer/issues/126 

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

*** PointCloud Viewer & Tools for Unity ***

v2.60

- Feature: Brekel animated cloud file streaming (stream data from disk, good for large files. Requires Brekel PointCloud V3 (beta or newer) with new unitycoder v3 format export) https://brekel.com/brekel-pointcloud-v3/

- Added: MeshPointsDX11QuadSizeByDistance.mat (scales point sizes by distance and min-max range, can be used in DX11 mode for meshes, to make far away points bigger)

- Improved: V1/V2 Point picking is now more accurate (and fixed slicing issues with some clouds)
- Improved: Brekel animated cloud (.bin) parsing is now ~2-3x faster (on top of the previous 2x improvement)
- Improved: Brekel animated cloud now uses less memory (no more padding or extra array copy/clear)

- Fixed: MeshConverter: Don't add extra vertex padding to brekel mesh frames (smaller files, less verts)
- Fixed: Build namespace errors (due to asmdef files, now removed) https://github.com/unitycoder/UnityPointCloudViewer/issues/104
- Fixed: PointCloud-ModifyAndSave-V2 example, saved UCPC file was missing bounds data from header
- Fixed: UCPC file saving failed to correct path, if output path had forward clashes

- Changed: BinaryConverter, allow gridsize smaller than 1 (0.01) for really dense clouds (but can cause other issues, not really tested) https://github.com/unitycoder/UnityPointCloudViewer/issues/101
- Changed: V3 viewer, hide mesh rendering toggle (since its not ready to be used yet)

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

*** PointCloud Viewer & Tools for Unity ***

v2.50

- Improved: Brekel animated cloud (.bin) parsing is now ~2x faster

- Added: New example scene (Sample-AnimatedPointCloudPlayer.scene) and small animated point cloud sample file
- Added: Metal Uber shader (except circle shape)

- Fixed: Brekel binary loader: files larger than 2gb failed parsing header correctly
- Fixed: MeshConverter: Unity 2019.x and later, possible null ref errors on SaveAsPrefabAsset() https://github.com/unitycoder/UnityPointCloudViewer/issues/94
- Fixed: NativeArray.GetSubArray not available in 2019.1 - 2019.2 https://github.com/unitycoder/UnityPointCloudViewer/issues/88
- Fixed: V3 point picking: doesnt pick points if camera is inside node https://github.com/unitycoder/UnityPointCloudViewer/issues/97
- Fixed: PointCloud-ModifyAndSave-V2.scene, points disappeared due to commandline window popping up during save (commandprompt window is now hidden, its used to merge binary files)

- Changed: [x] Allow Unsafe Code is now required! (from Player Settings)
- Changed: Brekel animated point cloud player is now separate script: BrekelPlayer.cs
- Changed: Removed Animated Point cloud code and features from PointCloudViewerDX11.cs
- Changed: PointCloudViewerDX11 arranged inspector values and titles

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

*** PointCloud Viewer & Tools for Unity ***

v2.40

- Info: URP/HDRP can be used, since they automatically call OnRenderObject() *Note: CommandBuffer-rendering option is not supported yet
- Info: Standalone PointCloud converter is now open source: https://github.com/unitycoder/PointCloudConverter (commandline and initial GUI)
- Info: For WebGL builds, use mesh converter with PointCloudAndroidSizeColorMesh material (see scene_mobile_heavy01.scene)

- Feature: (V3) Initial point picking (measuring) system (see example scene: PointCloud-Measuring-V3.scene)
- Feature: Added PCache Export option in PointCloud2Binary converter (pcache files can be used with unity VFX)
- Feature: (V3) Allow 0 for gpuUploadSteps (skips waiting for frame in tile initialization to load more tiles faster, can cause lags in large tiles)
- Feature: Added .ucpc (v2) runtime exporter and example scene (PointCloud-ModfiyAndSave-V2.scene)

- Added: Show human friendly total point counts in V3 viewer (1000 = 1k, 1000000 = 1m, ..)
- Added: V2 and V3 Lite Shaders (draws Triangles instead of Quads)
- Added: PointCloudViewerDX11 option to enable CommandBuffer rendering into scene camera (otherwise cloud is not visible in scene view)
- Added: Allow converting .PTS intensity color files to V3 format
- Added: Mac Metal material and shaders for v2 and v3 (at Materials/Metal/)

- Fixed: PointCloudManager check for viewer null references in Awake()
- Fixed: MeshConverter Catia .ASC parsing issue
- Fixed: Comma vs Dot issues in converters (due to Unity 2019.x changed the system) https://github.com/unitycoder/UnityPointCloudViewer/issues/69
- Fixed: 2018.4 and later: duplicated prefab issue https://github.com/unitycoder/UnityPointCloudViewer/issues/72
- Fixed: Handle .PLY with Density values (skip those rows) https://github.com/unitycoder/UnityPointCloudViewer/issues/76
- Fixed: Removed WebGL errors https://github.com/unitycoder/UnityPointCloudViewer/issues/83
- Fixed: Disable lighmap static flags for converted meshes 2019.x (to avoid console warning spam)

- Changed: Some materials and shaders cleanup and rearranged folders

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

*** PointCloud Viewer & Tools for Unity ***

v2.30

- Feature: (V3) Load Tiles On Demand (previously all tiles were loaded into memory, now it only loads them when they become visible, and  with needed amount of points, then reloaded if need more points)
- Feature: (V3) Distance Priority Loader (Load tiles near player first, previously it started loading tiles based on the distance to 0,0,0)
- Feature: (V3) Adjustable GPU Upload Rate (Reduce or eliminate spikes during loading and initialization)
- Feature: (V3) Added public GetVisibleTileCount() and GetVisiblePointCount() methods to V3 viewer (see example script ViewerStats.cs)
- Feature: (V3) Added global tile resolution (visible_points*this_value=new amount) *Note: Camera needs to be rotated around to refresh tiles
- Feature: (V3) Added global point size multiplier (original_pointsize*this_value=new size) *Note: Camera needs to be rotated around to refresh tiles, Requires separate shader which has SizeMultiplier property (PointCloudColorSizeDX11v2b.mat)
- Feature: (V3) Added optional ForceGC checkbox (calls GC.Collect() after file operations, to release some temporary arrays, helps more when using NativeArrays in 2019.x)
- Feature: (V3) Added support for Packed Colors (Use CommandLine LAS converter to generated packed color data)
- Feature: (V3) Added support for NativeArrays (Allows disposing memory for far away tiles. Requires Unity 2019.1 or later)
- Feature: (v1, V2) Added Area selection example (select points inside hull)

- Added: PointCloudColorSizeDX11v3-packed.mat and shader (to be used with v3 packed color data)
- Added: Link to github wiki documentation page
- Added: Random cloud generator: add .PTS format, cleanup UI

- Changed: Moved some wip/experimental DX11 shaders under PointCloudTools\Shaders\DX11\Extras\
- Changed: Moved some wip/experimental Mesh shaders under PointCloudTools\Shaders\Mesh\Extras\

- Fixed: Obsolete/Deprecated warnings in 2018.x/2019.x https://github.com/unitycoder/UnityPointCloudViewer/issues/67
- Fixed: (V3) Tiles not visible until rotate camera https://github.com/unitycoder/UnityPointCloudViewer/issues/66
- Fixed: Mesh Converter not saving meshes if used [x] split to grid https://github.com/unitycoder/UnityPointCloudViewer/issues/70

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

v2.20

- Feature: Add new tiles binary format (v3) (allows displaying huge point clouds using point lod system *Consider this as a "beta" feature)
- Feature: PointCloud2Binary Converter: Add option to limit total imported point count (ideal for quickly testing import settings)
- Feature: PointCloud2Binary Converter: Support large input files (tested 16gb ply file, with 432million points)
- Feature: PointCloud2Mesh Converter: Meshes are saved as full gameobjects (instead of mesh assets only) when [x] Add meshes to current scene is enabled. Note: Not supported for LODS yet

- Improved: PointCloud2Binary Converter: Add Cancel button to most of the conversion progressbars
- Improved: Add more info into converter progress bars (pointcounts)
- Improved: Add more validation and error checking here & there (will print to console)
- Improved: Add cancel button to random cloud generator progress bars

- Added: Example scene for v3 viewer: PointCloudTools/Demos/PointCloudViewer/Scenes/PointCloud-TilesViewerV3.scene

- Changed: Upgraded Project to Unity 2017.4.24f1 (probably will stay in this version for a while)

- Fixed: Various PLY importer issues (cloudcompare headers)
- Fixed: Single .pts/.pcd cloud with less than 1000 points was skipped on import
- Fixed: PointCloudConverter: Calculate correct bounds for v2 pointcloud
- Fixed: Using intensity colors now works with V2 format
- Fixed: Reading CGO data without RGB values into V2 format
- Fixed: Added conditional check for reprecated rendering in 2019_1 and later
- Fixed: Nullref error on random point cloud save cancel
- Fixed: Skip Geomagic ASC file header comment rows
- Fixed: v2 cancel loading if no RGB data in file

- Note: When converting large clouds into v3 format, its better to use commandline LAS/LAZ converter (432m points, editor=~50mins, cmdline=~10mins) https://github.com/unitycoder/UnityPointCloudViewer/wiki/Commandline-Tools

Latest updates/issues:
- https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

v2.10

- Feature: Add Multithreading to runtimeviewer
- Feature: Add Binary caching to binaryviewer (can save changes done during read data, like randomize)
- Feature: New binary format with faster loading (using file extension *.ucpc)
- Feature: Add split to grid option to PointCloud2Mesh converter (splits cloud into grid slices)
- Feature: Add randomize pointcloud to PointCloud2Binary converter

- Improved: Using new binary format (v2), loading 50 million points: 400ms (old version: 3200ms)
- Improved: PointCloud2Mesh reading is about 2 times faster now
- Improved: More info in the progress bars (point count)
- Improved: PointCloud2Binary, Faster .ply parsing

- Changed: Removed ThreadPool related code
- Changed: Project is using Unity 2017.1.5f1

- Fixed: PointCloudViewer packed color bleeding

- Notes: This is somewhat transition-version towards the new v2 format, so old format and the new format(V2) might not have all the same features yet.

See latest updates/issues here:
https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

v2.00

- Feature: Support for CommandBuffers (to draw DX11 points and/or depthbuffer)
- Feature: PointCloudDynamicResolution adjuster (set amount of visible points in DX11 viewer and point size)
- Feature: 32bit mesh index buffer support for Unity 2017.3 or newer (create point meshes with more than 64k points)
- Feature: Editor plugin now saves/loads converter preferences to editorprefs (PointCloud2Mesh and PointCloud2Binary)
- Feature: Randomize Points option to BinaryViewer to evenly randomize points (use with PointCloudDynamicResolution adjuster)
- Feature: Display points toggle (to toggle point rendering)
- Feature: Render only to main camera toggle (to render only with MainCamera-tagged camera). Otherwise caused slowdown with multiple cameras
- Feature: Middle Mouse Button Panning (with SimpleSmoothMouseLook)
- Feature: Can pick/measure points between multiple DX11 viewers
- Feature: Initial version of BoxIntersectsCloud() to allow checking collisions with point cloud
- Feature: Pack Colors option in PointCloudViewerDX11 (optimizes point data for GPU)
- Feature: Added initial mouse orbit in SimpleSmoothMouseLook (disabled by default)

- Improved: Animated .bin file faster loading
- Improved: Support for large (+2gb) animated point cloud .bin files (next limit is c# vector3 max array size)
- Improved: Using packed colors with 50 million points, cpu main stats went down from 120ms to 74ms

- Added: Helper methods to BinaryViewerDX11: GetTotalPointCount(), GetActivePointCount(), GetPointSize(), ToggleCloud(), SetPointSize(), AdjustVisiblePointsAmount(), 
- Added: PointCloudColorSizeFogDX11v2.material and shader that supports fog
- Added: MeshPointsDX11TextureMask material (can use texture alpha as a mask for point shape)
- Added: MeshPointsDX11QuadCircle material (draws circle instead of quad)
- Added: MeshPointsDX11BoxDirectionalLight material (draws 3D box at point position, affected by directional light)
- Added: MeshPointsDX11BoxDirectionalLight+Shadows+Fog material (draws 3D box at point position, affected by directional light + fog and supports shadows with point size)
- Added: All DX11 and Mesh shaders now support GAMMA and LINEAR modes
- Added: New example scene for taking measurements (BinaryViewerDX11-With-Measuring.scene)
- Added: New example scene for placing prefabs on clicked points (PointCloud-PlaceMarkers.scene)

- Changed: Renamed BinaryViewerDX11.cs into PointCloudViewerDX11.cs
- Changed: Re-arranged folders (to make folder hierarchy more cleaner/flatter)
- Changed: RuntimeViewer filepath can be full uri, or filename only (then StreamingAssets path is used instead)
- Changed: Renamed "Window/PointCloudTools/ShowHeaderDataHelper" to "Window/PointCloudTools/View File Header"
- Changed: Some variable names in PointCloud2Mesh and PointCloud2Binary
- Changed: Manual offset now works as an final world space offset value, that is added to the XYZ value (after point XYZ value is scaled and flipped). Calculated as finalXYZ += manualOffset
- Changed: You can now use both autoOffsetNearZero and manualOffset when converting data
- Changed: Removed static variables from BinaryViewerDX11 and RuntimeViewerDX11, to easily allow multiple viewer in one scene
- Changed: SimpleSmoothMouseLook now allows changing keys for movement

- Fixed: Null ref errors, if tried to load animated cloud but loading failed
- Fixed: CloudCompare saved .ply to my .bin conversion header parsing errors
- Fixed: MeshPointsDX11QuadOffset shader transform issues https://github.com/unitycoder/UnityPointCloudViewer/issues/44
- Fixed: Disable [x] Lightmap Static for point meshes (otherwise console error spam)
- Fixed: Editor slowdown if viewer was selected https://github.com/unitycoder/UnityPointCloudViewer/issues/38
- Fixed: Removed all unused variables from RuntimeViewer (and removed pragma disable warnings)
- Fixed: CGO comma parsing issue https://github.com/unitycoder/UnityPointCloudViewer/issues/47

- Removed: Completely removed old octree plugin and scripts related to it
- Removed: Old brute force point picking
- Removed: BaseFolder variable from BinaryViewerDX11 (just set your full path to filename instead)
- Removed: void ShowMessage(string msg), used old GUIText. Now prints error to Debug.LogError() instead
- Removed: SimpleCameraFly.cs (its now combined to SimpleSmoothMouseLook.cs)

*-----------------------------------------------------------------------*

v1.93

- Added: New material "MeshDX11QuadNormals-DirectionalLight.mat" (Quad Billboard for Point Mesh that has Normals, supports Directional Light)
- Added: New material "MeshDX11QuadNormalsAligned-Unlit.mat" (Quad Billboard for Point Mesh that has Normals, unlit)
- Added: New material "MeshDX11QuadNormalsAligned-Unlit-SizeByDistance.mat" (Point mesh, scale by distance, nearer is smaller. For example: use with mesh lods, to make points larger when far away)
- Added: New material "PointCloudMeshColorAlphaFadeByDistance.mat" (Point mesh, fade by distance)

- Changed: Upgraded project to Unity 5.6.1f1
- Changed: Moved sample data from "StreamingAssets/" into "StreamingAssets/PointCloudViewerSampleData/"

See latest updates/issues here:
https://github.com/unitycoder/UnityPointCloudViewer/issues

*-----------------------------------------------------------------------*

v1.92
- Added: PCD header binary checking (as only ascii .pcd is supported)
- Added: PLY header binary checking (as only ascii .ply is supported)
- Added: "BinaryViewerDX11-LoadNewCloud.scene" (Example scene for loading new cloud with script)
- Added: Example point cloud data file "StreamingAssets/sample2.bin" from http://graphics.stanford.edu/data/3Dscanrep/ (used in the "LoadMultipleDX11CloudsThreaded.scene")

- Fixed: Multiple PLY importer bugs (CloudCompare Normals order, header parsing)
- Fixed: Multiple LAS importer bugs (Missing colors, unused arrays)
- Fixed: Shader error in 2017.x https://github.com/unitycoder/UnityPointCloudViewer/issues/37

*-----------------------------------------------------------------------*

v1.91

- Added: Support for .PCD Ascii file format v0.7 *for color, only single value is supported, not separate R G B yet
- Added: Example scene "BinaryViewerDX11WithMeasuring-Override" to show how to override MeasurementManager DrawLine() method
- Added: New Shaders "PointCloudHeightGradientColorOpaqueDX11" and "PointCloudHeightGradientColorOpaqueDX11" for displaying single color point cloud with gradient (based on world Y height)
- Added: UpdatePointData() and UpdateColorData() to easily submit your own point cloud data into viewer, see example Scene "Your_Own_Pointcloud_Data_Viewer.scene"
- Added: DX11 PointCloud VR (singlepass) shader material for testing: PointCloud_DX11_FixedColorOpaque-VR.mat

- Fixed: MovieTexture error in "VideoDepthPlayer.cs" if building for webgl
- Fixed: .PTS intensity value parsing : https://github.com/unitycoder/UnityPointCloudViewer/issues/30
- Fixed: Nullref error if ReadRGB not selected, but ReadIntensity was selected
- Fixed: Nullref error if loaded animated point cloud, but file was not found
- Fixed: CloudCompare .PLY has extra comment line https://github.com/unitycoder/UnityPointCloudViewer/issues/34
- Fixed: Disable lightprobes on lod meshes

- Changed: Upgraded project to Unity 5.5.1f1
- Changed: Default point color alpha is now 1 (used to be 0.5)
- Changed: When converting to mesh, new gameobject folder is created per conversion (instead of adding points under same gameobject)
- Changed: Removed static singleton "instance" from BinaryViewerDX11.cs

*----------------------------------------------------\O/-------------------*

v1.9

- Improved: Faster point cloud to binary conversion (around 2-4 times faster)

- Added: Octree point picking and closest point selection preview (for DX11 viewer) *Requires Nition Unity Octree (included in the package)
- Added: ASC format now supports RGB colors (Geomagic XYZRGB files can be loaded with this, wont work with XYZ or XYZRGB)
- Added: PointCloud2Mesh converter now has option to disable: [x] Add Meshes to current scene (so they are only saved as assets)
- Added: GLDebug.cs helper script for drawing GL lines (could use for measurement/closest point)
- Added: Shader for android (supports color and point size) "UnityCoder/PointCloud/Mesh/AndroidColorSize"
- Added: New shader "PointCloudColorSizeByDistanceDX11" (scales points away from near camera)
- Added: Sample video clips for "scene_VideoDepthExtrude.scene" example *Note: uses movietexture
- Added: More error handling on point cloud to binary conversion
- Added: Added more instruction texts to example scene UI's

- Fixed: MovieTexture error in "VideoDepthPlayer.cs" if building for mobile platforms
- Fixed: Shader errors in 5.6 and later versions issue#28 https://github.com/unitycoder/UnityPointCloudViewer/issues/28
- Fixed: `UnityEngine.Renderer.useLightProbes' is obsolete (in 5.6 and later)

- Changed: Updated to Unity 5.3.7p4
- Changed: Binaryfile loading is now bit times faster (in both non-threaded and threaded loaders)
- Changed: Organized BinaryViewerDx11 inspector fields

See latest updates/issues here:
https://github.com/unitycoder/UnityPointCloudViewer/issues

*----------------------------------------------------O.o-------------------*

v1.8

- Added: Multithread DX11 Viewer loading and Point Picking (enable [x] useThreading at BinaryViewerDX11 component)
- Added: Experimental point picking with measuring (see example scene: BinaryViewerDX11WithMeasuring.scene)
- Added: Runtime raw point cloud viewer (parses raw pointclouds, see example scene: RuntimeParserLoaderDX11.scene)
- Added: BinaryViewerDx11.cs now has public bool option [x] LoadAtStart, if enabled, ReadPointCloud() is called at Start()
- Added: Example scene "LoadMultipleDX11CloudsThreaded.scene", to spawn multiple DX11 viewers with different clouds
- Added: MeshConverter: You can now convert multiple point clouds to meshes by dragging whole folder to the PointCloud Source-field)
- Added: New DX11 shaders to support PointSize in DX11 mode, Separate version for Linear Lighting *You can access them from the link inside PointCloudTools/Materials/Shaders/Extras/

- Fixed: MeshConverter: Optimize Mesh Point cloud feature now works (currently points are sorted by X axis, no other options yet)
- Fixed: Some Catia ascii files failed to import (because extra characters in comments / header)
- Fixed: Created meshes now have disabled light and blend probes (since those features are not used)
- Fixed: Fixed missing script error in "scene_VideoDepthExtrude.scene"
- Fixed: MeshConverter failed with large clouds (because PointData struct used too much memory)
- Fixed: `System.IO.File' does not contain a definition for `ReadAllBytes' (Caused by having SamsungTV as target platform)

- Changed: BinaryViewerDx11.cs changed OnDisable() to OnDestroy() instead (so that gameobject can be disabled, and re-enabled)
- Changed: BinaryReader now gives warning if file is too large to read (instead of crashing or error messages)
- Changed: Renamed/Moved DX11-Viewer shaders under UnityCoder/PointCloud/DX11/*
- Changed: Renamed/Moved Mesh shaders under UnityCoder/PointCloud/Mesh/*
- Changed: Renamed/Cleaned folders
- Changed: Moved PeekHeader logic into separate script
- Changed: Not using PointData struct anymore since it caused memory and sorting issues
- Changed: Moved WebplayerViewerDX11.scene into Old/ folder, since webplayer is removed on 5.4 already

*-----------------------------------------------------------------------*

v1.7

- Added: PointCloud2Mesh now has basic LOD mesh generation (with adjustable LOD amount)
- Added: Link for custom PointMeshSizeDX11 shaders (can adjust point size for mesh points in DX11 mode, since point size is not supported in DX11) *See Materials/Shaders/Extras-folder)

- Fixed: Unity5.2 or later couldnt set output filename in save dialog
- Fixed: CloudCompare PLY file had extra comment in header, it gets correctly skipped now

- Note: LOD meshes are not saved to project folder, they currently live in the scene only
- Note: Optimize Points & Decimate points are not supported with Brekel PointCloud2Binary importer

- Known issues: Optimize Points does not work properly, loses precision in some cases

*-----------------------------------------------------------------------*

v1.6
- Added: New material "PointCloudColorsMeshAlpha.material" (and shader "PointCloudMeshColorsAlpha.shader") with adjustable color tint & alpha
- Added: PointCloud2Mesh now imports .LAS & .PTS files
- Added: **Experimental** PseudoLight & VertexPush scene "scene_MeshPointPush" for mesh clouds (sets point brightness based on distance to give object and pushes(displaces) points away form given object)
- Added: Basic decimate cloud for PointCloud2Mesh (remove every #nth point)
- Added: Display selected file size (below sourcefile field)
- Added: **Experimental** [x] Optimize Points for PointCloud2Mesh (easier to see from scene view while playing), it sorts the points along X axis (to allow mesh pieces to get culled easier), but doesnt work well with all values, if your cloud seems to be missing points, disable Optimize points.

- Changed: Project is now updated to Unity5.1
- Changed: Point data is now internally read as doubles instead of floats (to avoid loss of precision during scaling)
- Changed: DX11 viewer & DX11 shaders now use less memory
- Changed: Improved .LAS parsing PointDataRecordFormats #2 & #3 are now supported
- Changed: With PointCloud2Mesh you dont need to select import format anymore, instead parser tries to read any suitable point cloud data (in common formats)
- Changed: Progress bar now also display during mesh saving
- Changed: Deleted 20 mesh clouds from "scene_mobile_heavy01.scene" to make it lighter

- Fixed: PointCloud2Mesh AutoOffset (it didnt work if FlipYZ was not enabled)
- Fixed: Fixed several parsing problems with some files (.asc, .pts, .las, .xyz)
- Fixed: .LAS colors values are now scaled to 0-255 (some files had different ranges)

- Note: DX11 Point clouds doesnt seem to work if Unity v5.x "[x] Virtual Reality Supported" is enabled
- Note: DX11 point clouds or Mesh point clouds doesnt seem to work with WebGL viewer

*-----------------------------------------------------------------------*

v1.5
- Added: ".LAS" import support for binary cloud converter *Only LAS format#2 is currently supported
- Added: ".PTS" import support for binary cloud converter (PTS: XYZ, XYZI, XYZIRGB, XYZRGB) *For now intensity value can be converted as RGB
- Added: "Window/PointCloudTools/Create test binary cloud" for creating random point clouds with adjustable point amount (for debug purposes)
- Added: "Window/PointCloudTools/Show header data helper" for printing out text based file headers (for debug purposes, to see what the file contains, ascii only)
- Added: "isLoading" boolean to check if we are still in loading

- Changed: Added "rotateWithRightMouse" bool into "SimpleSmoothMouseLook.cs", so you can rotate view while right mouse button is down
- Changed: BinaryViewer now automatically adds ".bin" to end of the file, if its missing in the inspector field
- Changed: .ASC reader now tries to skip all comment lines from start of the file (to allow reading Geomagic .asc files)

- Fixed: Manual offset values (had .x for all axis, instead of .x .y .z)
- Fixed: BinaryConverter now removes double or triple spaces between values, to fix Geomagic .asc import

- Note: MeshConverter does not yet support .LAS or .PTS importing (use some external tools to convert them to another supported format)


*-----------------------------------------------------------------------*

v1.4
- Added: Brekel Binary & Animated Frames viewer support (Experimental)
- Added: Brekel Binary Animated Frames to Mesh conversion support (Experimental)
- Added: Mobile demo scene (using meshes) "scene_mobile_heavy01.scene"

- Changed: Faster binary loading *If you experience out of memory problems, do let me know! *2gb is max file size..


*-----------------------------------------------------------------------*

v1.3
- Added: WebplayerViewerDX11 (loads binary file from url using WWW)
- Added: Import normals (PLY format only and PointCloud2MeshConverter only. Not for DX11 yet)
- Added: Shader+Materials with normals (PointCloudColorsNormalsMesh)

- Starting to cleanup "BinaryViewerDX11", moved code from Start() into ReadPointCloud()


*-----------------------------------------------------------------------*

v1.2
- Fixed: PointCloud2MeshConverter failed to save mesh, if point amount was less than given vertex limit amount


*-----------------------------------------------------------------------*

v1.1
- Initial release


*-----------------------------------------------------------------------*

unitycoder.com
